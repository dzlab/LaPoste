package com.lapost.staff;

import java.util.Hashtable;


import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.database.Cursor;
import android.location.Location;
import android.location.LocationManager;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.InputType;
import android.util.Log;
import android.view.KeyEvent;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.webkit.WebChromeClient;
import android.webkit.WebSettings;
import android.webkit.WebStorage;
import android.webkit.WebView;
import android.widget.EditText;

// Classe principale de l'application

public class StaffActivity extends Activity {

	private WebView webView;
	private Handler handler = new Handler();
	private LocalContent local = new LocalContent(this);
	private JavaScriptInterface jsi = new JavaScriptInterface();
	private Hashtable<String, String> params = new Hashtable<String, String>();
	SharedPreferences prefs ;
    SharedPreferences.Editor editor;
	

	@Override
	public void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.main);
		final Intent intent = getIntent();

		// Cr閍tion de la webview permettant d'afficher la page HTML
		webView = (WebView) findViewById(R.id.main);

		// Activation du JavaScript
		final WebSettings settings = webView.getSettings();
		settings.setJavaScriptEnabled(true);
		webView.addJavascriptInterface(jsi, "JSIface");

		// Activation du local storage HTML5
		webView.getSettings().setDatabaseEnabled(true);
		webView.getSettings().setDomStorageEnabled(true);
		webView.setWebChromeClient(new WebChromeClient() { 
			public void onExceededDatabaseQuota(String url, String databaseIdentifier, long currentQuota, long estimatedSize, long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) { 
				quotaUpdater.updateQuota(5 * 1024 * 1024); 
			} 
		}); 
		
		// R閏up閞ation des donn閑s de l'url
		final Uri data = intent.getData();
		final String urlData = data.toString();
		final String str[] = urlData.split("/");
		final String paramsUrl = str[str.length-1];
		final int index = paramsUrl.indexOf("$");
		
		// Si l'url contient des param鑤res
		String query[] = paramsUrl.substring(0, index).split(java.util.regex.Pattern.quote("|"));
		if(query.length > 1){
			for(int i = 0; i < query.length; i++){
				int j = query[i].indexOf("=");
				params.put(query[i].substring(0, j), query[i].substring(j+1));
			}
		}
		
		//R閏up閞ation de l'action contenue dans l'url
		final String fragment = paramsUrl.substring(index + 1);

		//Action en fonction de l'action pass�?dans l'url
		if ("retour".equals(fragment)){
			finish();
		}
		else if ("action1".equals(fragment)){
			function1();
			// s'il y a d'autres onglets, il est utile de les pr閏harger ensuite :
			// new DownloadContent2(jsi).execute();
			// new DownloadContent3(jsi).execute();
			// etc.
		}
		else if("page1".equals(fragment)){
			//Redirection vers une page particuliere
			String url = "file:///android_asset/onglets-content.html";
			webView.setVerticalScrollbarOverlay(true);
			webView.loadUrl(url);
		}
		else if("authent".equals(fragment)){
			SharedPreferences prefs = getSharedPreferences("preferences", 0);
	        SharedPreferences.Editor editor = prefs.edit();
	        editor.putString("login", params.get("login"));
	        editor.putString("pass", params.get("pass"));
	        editor.putString("memo", params.get("memo"));
	        editor.commit();
	        
	        String url = "file:///android_asset/authent.html";
			webView.setVerticalScrollbarOverlay(true);
			webView.loadUrl(url);
		}
		else if ("audi".equals(fragment)){
			SharedPreferences prefs = getSharedPreferences("preferences", 0);
			String userMemo = prefs.getString("memo", "");
			
			scranBarCode();

			
			/*String url = "file:///android_asset/login.html";
			webView.setVerticalScrollbarOverlay(true);
			webView.loadUrl(url);
			
			if(userMemo.equals("true")){
		        String userLogin = prefs.getString("login","");
		        String userPass = prefs.getString("pass","");
		        
		        jsi.publishAuthent(userLogin, userPass);
			} */
		}
		else if("notCGU".equals(fragment)){
			String url = "file:///android_asset/login.html";
			webView.setVerticalScrollbarOverlay(true);
			webView.loadUrl(url);
			
			AlertDialog cgu = new AlertDialog.Builder(this).create();
	        String cguMessage = "Vous n'avez pas accept�les CGU";
	        cgu.setMessage(cguMessage);
	        cgu.setCanceledOnTouchOutside(true);
	        cgu.show();        
		}
		else {
			//Action par d閒aut (redirection)
			String url = "file:///android_asset/onglets-content.html";
			webView.setVerticalScrollbarOverlay(true);
			webView.loadUrl(url);
		}
	}

	// Fonction exemple chargeant une page web et appelant la tache
	// asynchrone DownloadSms pour afficher les messages
	private void function1() {
		webView.loadUrl("file:///android_asset/onglets-content.html");
//		new DownloadContent(jsi).execute();
		// exemple :
		new DownloadSms(jsi).execute();
	}

	// T鈉he asynchrone g閚閞ique, permettant de charger un contenu
	// selon 3 param鑤res (String)
	public class DownloadContent extends AsyncTask<Void, String, Void> {
		private JavaScriptInterface jsi;
		Cursor managedCursor;

		public DownloadContent(JavaScriptInterface jsi) {
			super();
			this.jsi = jsi;
		}

		@Override
		protected void onPreExecute() {
			managedCursor = local.loadContent();
		}

		@Override
		protected Void doInBackground(Void... params) {

			if (managedCursor.moveToFirst()) {

				do {
					final String param1 = managedCursor.getString(managedCursor.getColumnIndex("param1"));
					final String param2 = managedCursor.getString(managedCursor.getColumnIndex("param2"));
					jsi.publishContent(param1, param2);						
				} while (managedCursor.moveToNext());
			}
			else{
				jsi.publishContent("Pas d'閘閙ents �afficher", "");
			}
			managedCursor.close();	
			return null;  
		}
	}

	// Exemple de t鈉he asynchrone permettant d'afficher ses sms
	public class DownloadSms extends AsyncTask<Void, String, Void> {
		private JavaScriptInterface jsi;
		Cursor managedCursor;
				
		public DownloadSms(JavaScriptInterface jsi) {
			super();
			this.jsi = jsi;
		}

		@Override
		protected void onPreExecute() {
			managedCursor = local.loadSmsRecus();
		}
		
		@Override
		protected Void doInBackground(Void... params) {
			if(managedCursor == null){
				jsi.publishSms("Aucuns sms enregistré", "", "");
			}
			else{
				if (managedCursor.moveToFirst()) {
					do {
						final String sender = managedCursor.getString(managedCursor.getColumnIndex("address"));
						final String content = managedCursor.getString(managedCursor.getColumnIndex("body"));
						final long timestamp = managedCursor.getLong(managedCursor.getColumnIndex("date"));
						final String date = Utils.getDatabaseDate(timestamp);
						
						jsi.publishSms(sender, date, content);
											
					} while (managedCursor.moveToNext());
				}
				managedCursor.close();
			}
			return null;  
		}
	}
	
	// INTERFACE JAVASCRIPT
	public class JavaScriptInterface {

		JavaScriptInterface() {
		}

		// Fonction g閚閞ique prenant en entr�?3 param鑤res (String)
		public void publishContent(final String paramString1, final String paramString2) {
			handler.post(new Runnable() {
				public void run() {
					// appel �la fonction javascript addContent, �d閒inir dans scripts.js
					webView.loadUrl("javascript:addContent(\""+paramString1+"\", \""+paramString2+"\")");
				}
			});

		}
		
	    public void publishSms(final String sender, final String date, final String content) {
	    	handler.post(new Runnable() {
	            public void run() {
	            	webView.loadUrl("javascript:addMessage(\""+sender+"\", \""+date+"\", \""+content+"\")");
	            }
	        });

	    }
		
		public void publishAuthent(final String login, final String pass) {
			handler.post(new Runnable() {
				public void run() {
					webView.loadUrl("javascript:addAuthent(\""+login+"\", \""+pass+"\")");
				}
			});

		}
		
	}

	/// FONCTIONS SPECIFIQUES ANNEXES ///

	// Fonction permettant de r閏up閞er les coordonn閑s GPS
	// Si on l'utilise, il faut rajouter les permissions n閏essaires dans le manifest
	public Location getLocation(){
		LocationManager locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
		//		Toast.makeText(this, "latitude = " + location.getLatitude() + "longitude = " + location.getLongitude(), Toast.LENGTH_LONG).show();
		return location;
	}
	
	// Fonction permettant de surcharger le bouton retour Android,
	// pour permettre le retour arri鑢e au sein des pages d'une WebView
	// Sans �?le bouton retour revient �l'activit�pr閏閐ente!
	@Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if(event.getAction() == KeyEvent.ACTION_DOWN){
            switch(keyCode)
            {
            case KeyEvent.KEYCODE_BACK:
                if(webView.canGoBack() == true){
                    webView.goBack();
                }else{
                    finish();
                }
                return true;
            }

        }
        return super.onKeyDown(keyCode, event);
    }

	
	   public void scranBarCode() {
	        Intent intent = new Intent("com.google.zxing.client.android.SCAN");
	        intent.putExtra("SCAN_MODE", "ONE_D_MODE");
	        startActivityForResult(intent, 0);
	    }
	   
		
		public void onActivityResult(int requestCode, int resultCode, Intent intent) {
		    if (requestCode == 0) {
		        if (resultCode == RESULT_OK) {
		            String contents = intent.getStringExtra("SCAN_RESULT");
		            String format = intent.getStringExtra("SCAN_RESULT_FORMAT");
		            
		            editor.putString("login", contents);
			       // editor.putString("pass", params.get("pass"));
			       // editor.putString("memo", params.get("memo"));
			        editor.commit();
			        
			        Log.d("The result is", prefs.getString("login",""));

			       
			        displayPinCodePopup();
			       // finish();
		            // Handle successful scan
		        } else if (resultCode == RESULT_CANCELED) {
		            // Handle cancel
		        }
		    }
		}
		
		public void displayPinCodePopup(){
			
			
			// Set an EditText view to get user input 
			final EditText input = new EditText(this);
			input.requestFocus();
	        input.setInputType(InputType.TYPE_CLASS_NUMBER);




			new AlertDialog.Builder(this)
			    .setTitle("Client: "+prefs.getString("login",""))
			    .setMessage("Veuillez saisir le code PIN")
			    .setView(input)
			    .setPositiveButton("Ok", new DialogInterface.OnClickListener() {
			         public void onClick(DialogInterface dialog, int whichButton) {
			             Editable editable = input.getText(); 
			             //editable.// deal with the editable
			         }
			    })
			    .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
			         public void onClick(DialogInterface dialog, int whichButton) {
			                // Do nothing.
			         }
			    }).show();
			
			input.requestFocus();


			InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); 
			
			imm.showSoftInput(input, InputMethodManager.SHOW_IMPLICIT);
		}
}